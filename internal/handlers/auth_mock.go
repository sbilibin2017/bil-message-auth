// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message-auth/internal/handlers/auth.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/sbilibin2017/bil-message-auth/internal/models"
)

// MockUserRegisterer is a mock of UserRegisterer interface.
type MockUserRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegistererMockRecorder
}

// MockUserRegistererMockRecorder is the mock recorder for MockUserRegisterer.
type MockUserRegistererMockRecorder struct {
	mock *MockUserRegisterer
}

// NewMockUserRegisterer creates a new mock instance.
func NewMockUserRegisterer(ctrl *gomock.Controller) *MockUserRegisterer {
	mock := &MockUserRegisterer{ctrl: ctrl}
	mock.recorder = &MockUserRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegisterer) EXPECT() *MockUserRegistererMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockUserRegisterer) RegisterUser(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserRegistererMockRecorder) RegisterUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserRegisterer)(nil).RegisterUser), ctx, username, password)
}

// MockDeviceRegisterer is a mock of DeviceRegisterer interface.
type MockDeviceRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRegistererMockRecorder
}

// MockDeviceRegistererMockRecorder is the mock recorder for MockDeviceRegisterer.
type MockDeviceRegistererMockRecorder struct {
	mock *MockDeviceRegisterer
}

// NewMockDeviceRegisterer creates a new mock instance.
func NewMockDeviceRegisterer(ctrl *gomock.Controller) *MockDeviceRegisterer {
	mock := &MockDeviceRegisterer{ctrl: ctrl}
	mock.recorder = &MockDeviceRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRegisterer) EXPECT() *MockDeviceRegistererMockRecorder {
	return m.recorder
}

// RegisterDevice mocks base method.
func (m *MockDeviceRegisterer) RegisterDevice(ctx context.Context, username, password, publicKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDevice", ctx, username, password, publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterDevice indicates an expected call of RegisterDevice.
func (mr *MockDeviceRegistererMockRecorder) RegisterDevice(ctx, username, password, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDevice", reflect.TypeOf((*MockDeviceRegisterer)(nil).RegisterDevice), ctx, username, password, publicKey)
}

// MockUserLoginer is a mock of UserLoginer interface.
type MockUserLoginer struct {
	ctrl     *gomock.Controller
	recorder *MockUserLoginerMockRecorder
}

// MockUserLoginerMockRecorder is the mock recorder for MockUserLoginer.
type MockUserLoginerMockRecorder struct {
	mock *MockUserLoginer
}

// NewMockUserLoginer creates a new mock instance.
func NewMockUserLoginer(ctrl *gomock.Controller) *MockUserLoginer {
	mock := &MockUserLoginer{ctrl: ctrl}
	mock.recorder = &MockUserLoginerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLoginer) EXPECT() *MockUserLoginerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserLoginer) Login(ctx context.Context, username, password, publicKey string) (uuid.UUID, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password, publicKey)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUserLoginerMockRecorder) Login(ctx, username, password, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserLoginer)(nil).Login), ctx, username, password, publicKey)
}

// MockDeviceLister is a mock of DeviceLister interface.
type MockDeviceLister struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceListerMockRecorder
}

// MockDeviceListerMockRecorder is the mock recorder for MockDeviceLister.
type MockDeviceListerMockRecorder struct {
	mock *MockDeviceLister
}

// NewMockDeviceLister creates a new mock instance.
func NewMockDeviceLister(ctrl *gomock.Controller) *MockDeviceLister {
	mock := &MockDeviceLister{ctrl: ctrl}
	mock.recorder = &MockDeviceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceLister) EXPECT() *MockDeviceListerMockRecorder {
	return m.recorder
}

// ListUserDevices mocks base method.
func (m *MockDeviceLister) ListUserDevices(ctx context.Context, userUUID uuid.UUID) ([]*models.DeviceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserDevices", ctx, userUUID)
	ret0, _ := ret[0].([]*models.DeviceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserDevices indicates an expected call of ListUserDevices.
func (mr *MockDeviceListerMockRecorder) ListUserDevices(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserDevices", reflect.TypeOf((*MockDeviceLister)(nil).ListUserDevices), ctx, userUUID)
}

// MockUserDeviceGetter is a mock of UserDeviceGetter interface.
type MockUserDeviceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUserDeviceGetterMockRecorder
}

// MockUserDeviceGetterMockRecorder is the mock recorder for MockUserDeviceGetter.
type MockUserDeviceGetterMockRecorder struct {
	mock *MockUserDeviceGetter
}

// NewMockUserDeviceGetter creates a new mock instance.
func NewMockUserDeviceGetter(ctrl *gomock.Controller) *MockUserDeviceGetter {
	mock := &MockUserDeviceGetter{ctrl: ctrl}
	mock.recorder = &MockUserDeviceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDeviceGetter) EXPECT() *MockUserDeviceGetterMockRecorder {
	return m.recorder
}

// GetUserDevice mocks base method.
func (m *MockUserDeviceGetter) GetUserDevice(ctx context.Context, userUUID, deviceUUID uuid.UUID) (*models.DeviceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDevice", ctx, userUUID, deviceUUID)
	ret0, _ := ret[0].(*models.DeviceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDevice indicates an expected call of GetUserDevice.
func (mr *MockUserDeviceGetterMockRecorder) GetUserDevice(ctx, userUUID, deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevice", reflect.TypeOf((*MockUserDeviceGetter)(nil).GetUserDevice), ctx, userUUID, deviceUUID)
}

// MockTokener is a mock of Tokener interface.
type MockTokener struct {
	ctrl     *gomock.Controller
	recorder *MockTokenerMockRecorder
}

// MockTokenerMockRecorder is the mock recorder for MockTokener.
type MockTokenerMockRecorder struct {
	mock *MockTokener
}

// NewMockTokener creates a new mock instance.
func NewMockTokener(ctrl *gomock.Controller) *MockTokener {
	mock := &MockTokener{ctrl: ctrl}
	mock.recorder = &MockTokenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokener) EXPECT() *MockTokenerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokener) Generate(userUUID, deviceUUID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", userUUID, deviceUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenerMockRecorder) Generate(userUUID, deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokener)(nil).Generate), userUUID, deviceUUID)
}

// GetFromHeader mocks base method.
func (m *MockTokener) GetFromHeader(header http.Header) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromHeader", header)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromHeader indicates an expected call of GetFromHeader.
func (mr *MockTokenerMockRecorder) GetFromHeader(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromHeader", reflect.TypeOf((*MockTokener)(nil).GetFromHeader), header)
}

// Parse mocks base method.
func (m *MockTokener) Parse(ctx context.Context, tokenString string) (uuid.UUID, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, tokenString)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Parse indicates an expected call of Parse.
func (mr *MockTokenerMockRecorder) Parse(ctx, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockTokener)(nil).Parse), ctx, tokenString)
}
