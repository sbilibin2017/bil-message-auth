// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message-auth/internal/services/auth.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/sbilibin2017/bil-message-auth/internal/models"
)

// MockUserWriter is a mock of UserWriter interface.
type MockUserWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUserWriterMockRecorder
}

// MockUserWriterMockRecorder is the mock recorder for MockUserWriter.
type MockUserWriterMockRecorder struct {
	mock *MockUserWriter
}

// NewMockUserWriter creates a new mock instance.
func NewMockUserWriter(ctrl *gomock.Controller) *MockUserWriter {
	mock := &MockUserWriter{ctrl: ctrl}
	mock.recorder = &MockUserWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserWriter) EXPECT() *MockUserWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockUserWriter) Save(ctx context.Context, userUUID uuid.UUID, username, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userUUID, username, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserWriterMockRecorder) Save(ctx, userUUID, username, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserWriter)(nil).Save), ctx, userUUID, username, passwordHash)
}

// MockUserReader is a mock of UserReader interface.
type MockUserReader struct {
	ctrl     *gomock.Controller
	recorder *MockUserReaderMockRecorder
}

// MockUserReaderMockRecorder is the mock recorder for MockUserReader.
type MockUserReaderMockRecorder struct {
	mock *MockUserReader
}

// NewMockUserReader creates a new mock instance.
func NewMockUserReader(ctrl *gomock.Controller) *MockUserReader {
	mock := &MockUserReader{ctrl: ctrl}
	mock.recorder = &MockUserReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReader) EXPECT() *MockUserReaderMockRecorder {
	return m.recorder
}

// GetByUUID mocks base method.
func (m *MockUserReader) GetByUUID(ctx context.Context, userUUID uuid.UUID) (*models.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, userUUID)
	ret0, _ := ret[0].(*models.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockUserReaderMockRecorder) GetByUUID(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockUserReader)(nil).GetByUUID), ctx, userUUID)
}

// GetByUsername mocks base method.
func (m *MockUserReader) GetByUsername(ctx context.Context, username string) (*models.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*models.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserReaderMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserReader)(nil).GetByUsername), ctx, username)
}

// MockDeviceWriter is a mock of DeviceWriter interface.
type MockDeviceWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceWriterMockRecorder
}

// MockDeviceWriterMockRecorder is the mock recorder for MockDeviceWriter.
type MockDeviceWriterMockRecorder struct {
	mock *MockDeviceWriter
}

// NewMockDeviceWriter creates a new mock instance.
func NewMockDeviceWriter(ctrl *gomock.Controller) *MockDeviceWriter {
	mock := &MockDeviceWriter{ctrl: ctrl}
	mock.recorder = &MockDeviceWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceWriter) EXPECT() *MockDeviceWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockDeviceWriter) Save(ctx context.Context, deviceUUID, userUUID uuid.UUID, publicKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, deviceUUID, userUUID, publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDeviceWriterMockRecorder) Save(ctx, deviceUUID, userUUID, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDeviceWriter)(nil).Save), ctx, deviceUUID, userUUID, publicKey)
}

// MockDeviceReader is a mock of DeviceReader interface.
type MockDeviceReader struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceReaderMockRecorder
}

// MockDeviceReaderMockRecorder is the mock recorder for MockDeviceReader.
type MockDeviceReaderMockRecorder struct {
	mock *MockDeviceReader
}

// NewMockDeviceReader creates a new mock instance.
func NewMockDeviceReader(ctrl *gomock.Controller) *MockDeviceReader {
	mock := &MockDeviceReader{ctrl: ctrl}
	mock.recorder = &MockDeviceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceReader) EXPECT() *MockDeviceReaderMockRecorder {
	return m.recorder
}

// GetByPublicKey mocks base method.
func (m *MockDeviceReader) GetByPublicKey(ctx context.Context, publicKey string) (*models.DeviceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPublicKey", ctx, publicKey)
	ret0, _ := ret[0].(*models.DeviceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPublicKey indicates an expected call of GetByPublicKey.
func (mr *MockDeviceReaderMockRecorder) GetByPublicKey(ctx, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPublicKey", reflect.TypeOf((*MockDeviceReader)(nil).GetByPublicKey), ctx, publicKey)
}

// GetByUserDeviceUUIDs mocks base method.
func (m *MockDeviceReader) GetByUserDeviceUUIDs(ctx context.Context, userUUID, deviceUUID uuid.UUID) (*models.DeviceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserDeviceUUIDs", ctx, userUUID, deviceUUID)
	ret0, _ := ret[0].(*models.DeviceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserDeviceUUIDs indicates an expected call of GetByUserDeviceUUIDs.
func (mr *MockDeviceReaderMockRecorder) GetByUserDeviceUUIDs(ctx, userUUID, deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserDeviceUUIDs", reflect.TypeOf((*MockDeviceReader)(nil).GetByUserDeviceUUIDs), ctx, userUUID, deviceUUID)
}

// ListDevicesByUserUUID mocks base method.
func (m *MockDeviceReader) ListDevicesByUserUUID(ctx context.Context, userUUID uuid.UUID) ([]*models.DeviceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesByUserUUID", ctx, userUUID)
	ret0, _ := ret[0].([]*models.DeviceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevicesByUserUUID indicates an expected call of ListDevicesByUserUUID.
func (mr *MockDeviceReaderMockRecorder) ListDevicesByUserUUID(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesByUserUUID", reflect.TypeOf((*MockDeviceReader)(nil).ListDevicesByUserUUID), ctx, userUUID)
}
