// Package http Code generated by swaggo/swag. DO NOT EDIT
package http

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Проверяет учетные данные пользователя и возвращает токен",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Логин пользователя",
                "parameters": [
                    {
                        "description": "Данные для логина",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный логин, токен возвращается в теле"
                    },
                    "400": {
                        "description": "Некорректные данные запроса или неверные учетные данные"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/auth/register/device": {
            "post": {
                "description": "Добавляет новое устройство (публичный ключ) для существующего пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Регистрация нового устройства для существующего пользователя",
                "parameters": [
                    {
                        "description": "Данные устройства",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterDeviceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Устройство успешно зарегистрировано"
                    },
                    "400": {
                        "description": "Некорректные данные запроса или неверные учетные данные"
                    },
                    "409": {
                        "description": "Устройство уже зарегистрировано"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/auth/register/user": {
            "post": {
                "description": "Создаёт нового пользователя с заданными username и password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно зарегистрирован"
                    },
                    "400": {
                        "description": "Некорректные данные запроса"
                    },
                    "409": {
                        "description": "Пользователь с таким именем уже существует"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/auth/user": {
            "get": {
                "description": "Возвращает данные пользователя по токену",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Получить информацию о пользователе",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserDeviceResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректный токен"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/auth/user/devices": {
            "get": {
                "description": "Возвращает список всех устройств, зарегистрированных для пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Получить список устройств пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer токен",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.DeviceResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Некорректный токен"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.DeviceResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Дата и время создания устройства в формате RFC3339\nexample: 2025-08-30T12:34:56Z",
                    "type": "string"
                },
                "device_uuid": {
                    "description": "Уникальный идентификатор устройства\nexample: 550e8400-e29b-41d4-a716-446655440000",
                    "type": "string"
                },
                "public_key": {
                    "description": "Публичный ключ устройства\nexample: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQE...",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Дата и время последнего обновления устройства в формате RFC3339\nexample: 2025-08-30T12:34:56Z",
                    "type": "string"
                },
                "user_uuid": {
                    "description": "UUID пользователя, которому принадлежит устройство\nexample: 550e8400-e29b-41d4-a716-446655440001",
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Пароль пользователя\nrequired: true\nexample: mySecret123",
                    "type": "string"
                },
                "public_key": {
                    "description": "Публичный ключ устройства\nrequired: true\nexample: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQE...",
                    "type": "string"
                },
                "username": {
                    "description": "Username пользователя\nrequired: true\nexample: johndoe",
                    "type": "string"
                }
            }
        },
        "handlers.RegisterDeviceRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Пароль пользователя\nrequired: true\nexample: mySecret123",
                    "type": "string"
                },
                "public_key": {
                    "description": "Публичный ключ устройства (raw string)\nrequired: true\nexample: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQE...",
                    "type": "string"
                },
                "username": {
                    "description": "Username пользователя\nrequired: true\nexample: johndoe",
                    "type": "string"
                }
            }
        },
        "handlers.RegisterUserRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Пароль пользователя\nrequired: true\nexample: mySecret123",
                    "type": "string"
                },
                "username": {
                    "description": "Username пользователя\nrequired: true\nexample: johndoe",
                    "type": "string"
                }
            }
        },
        "handlers.UserDeviceResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Дата и время создания устройства в формате RFC3339\nexample: 2025-08-30T12:34:56Z",
                    "type": "string"
                },
                "device_uuid": {
                    "description": "Уникальный идентификатор устройства\nexample: 550e8400-e29b-41d4-a716-446655440000",
                    "type": "string"
                },
                "public_key": {
                    "description": "Публичный ключ устройства\nexample: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQE...",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Дата и время последнего обновления устройства в формате RFC3339\nexample: 2025-08-30T12:34:56Z",
                    "type": "string"
                },
                "user_uuid": {
                    "description": "UUID пользователя, которому принадлежит устройство\nexample: 550e8400-e29b-41d4-a716-446655440001",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "auth API",
	Description:      "API для аутентификации",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
